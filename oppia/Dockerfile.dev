# Stage 1: Base build stage
FROM python:3.12-slim AS builder
 
# Create the app directory
RUN mkdir /app
 
# Set the working directory
WORKDIR /app
 
# Set environment variables to optimize Python
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH="/app"

RUN apt-get update && apt-get install -y --no-install-recommends \
    dos2unix \
    ffmpeg \
    gcc \
    libpq-dev \
    python3-dev \
    pkg-config \
    default-libmysqlclient-dev \
    libfreetype6-dev \
    && rm -rf /var/lib/apt/lists/*

# Upgrade pip and install dependencies
RUN pip install --upgrade pip 
 
# Copy the requirements file first (better caching)
COPY ./django-oppia/requirements.txt /app/
 
# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt
 
# Stage 2: Production stage
FROM python:3.12-slim

# Install system dependencies (including Tesseract) in the final image
RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg \
    libpq-dev \
    libjpeg-dev \
    zlib1g-dev \
    pkg-config \
    dos2unix \
    default-libmysqlclient-dev \
    libfreetype6-dev \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/*
 
RUN useradd -m -r appuser && \
   mkdir /app && \
   chown -R appuser /app && \
   mkdir -p /media && \
   chown -R appuser /media && \
   mkdir -p /static && \
   chown -R appuser /static && \
   mkdir -p /upload && \
   chown -R appuser /upload

# Copy the Python dependencies from the builder stage
COPY --from=builder /usr/local/lib/python3.12/site-packages/ /usr/local/lib/python3.12/site-packages/
COPY --from=builder /usr/local/bin/ /usr/local/bin/
 
# Set the working directory
WORKDIR /app
 
# Copy application code
COPY --chown=appuser:appuser ./django-oppia/ .
 
# Set environment variables to optimize Python
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1 

# Copy and Ensure the entrypoint script is executable
# COPY  --chown=appuser:appuser ./appentrypoint.sh /app/
RUN chmod +x /app/appentrypoint.sh


# Switch to non-root user
USER appuser
 
# Expose the application port
EXPOSE 8000 

ENTRYPOINT ["/app/appentrypoint.sh"]

# Run Djangoâ€™s development server
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
 
# Start the application using Gunicorn
# CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "leanersai.wsgi:application"]